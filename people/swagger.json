{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Documentation of our awesome API.",
    "title": "awesome.",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user.",
        "operationId": "addUser",
        "parameters": [
          {
            "description": "user model",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user Response",
            "$ref": "#/responses/userResponse"
          },
          "400": {
            "description": "error Response",
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      },
      "x-go-package": "people/utils"
    },
    "NullString": {
      "description": "var s NullString\nerr := db.QueryRow(\"SELECT name FROM foo WHERE id=?\", id).Scan(\u0026s)\n...\nif s.Valid {\nuse s.String\n} else {\nNULL value\n}",
      "type": "object",
      "title": "NullString represents a string that may be null.\nNullString implements the Scanner interface so\nit can be used as a scan destination:",
      "properties": {
        "String": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "group_id": {
          "$ref": "#/definitions/NullString"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "people/models"
    }
  },
  "responses": {
    "errorResponse": {
      "description": "Error response",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "userResponse": {
      "description": "User response",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "usersResponse": {
      "description": "Users response",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/User"
        }
      }
    }
  }
}